@page "/configuration/{organizationId}/{realmId}/{sectionId}/{habitatId}"
@inject HttpClient client;
@using Allard.Configinator.Blazor.Shared.ViewModels
@using System.Text.Json
<h3>Configuration</h3>

@code {

    [Parameter]
    public string OrganizationId { get; set; }

    [Parameter]
    public string RealmId { get; set; }

    [Parameter]
    public string SectionId { get; set; }

    [Parameter]
    public string HabitatId { get; set; }

    public bool Edit { get; set; }


    private ObjectViewModel explained;
    private SaveResponseViewModel SaveResponse;
    private string Json { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var url = $"/api/v1/config/{OrganizationId}/{RealmId}/{SectionId}/{HabitatId}/value-explained";
        explained = await client.GetFromJsonAsync<ObjectViewModel>(url);
    }
    
    private async Task CancelEdit()
    {
        Edit = false;
        // todo: this should be a FORM RESET or something. brute force for now.
        await Load();
    }


    public async Task Save()
    {
        var result = new Dictionary<string, object>();
        foreach (var p in explained.Objects)
        {
            result[p.Name] = ToDictionary(p);
        }

        Json = JsonSerializer.Serialize(result);
        var url = $"/api/v1/config/{OrganizationId}/{RealmId}/{SectionId}/{HabitatId}/value-resolved";
        var x = await client.PutAsJsonAsync(url, result);
        SaveResponse = await x.Content.ReadFromJsonAsync<SaveResponseViewModel>();
        if (SaveResponse is {Success: true })
        {
            Edit = false;
            await Load();
        }
    }

    private Dictionary<string, object> ToDictionary(ObjectViewModel obj)
    {
        var result = new Dictionary<string, object>();
        foreach (var p in obj.Properties)
        {
            // if the value is null, don't set it.
            // the lack of the property will allow
            // it to inherit from the base.
            // if its explicitly set to anything,
            // including null, the value isn't inherited.
            var value = GetJsonValue(p.Value);
            if (value != null)
            {
                result[p.Name] = value;
            }
        }

        foreach (var o in obj.Objects)
        {
            result[o.Name] = ToDictionary(o);
        }
        
        return result;
    }

    private static object GetJsonValue(object value)
    {
        if (value == null)
        {
            return value;
        }

        if (value is string s)
        {
            return string.IsNullOrWhiteSpace(s) ? null : s;
        }

        return value;
    }

    
}

<h1>@OrganizationId/@RealmId/@SectionId/@HabitatId</h1>

@if (SaveResponse != null)
{
    <ul>
        @foreach (var error in SaveResponse.Failures)
        {
            <li>@(error.Code == "RequiredPropertyValueMissing" ? "Required" : error.Code) : @error.Path</li>
        }
    </ul>
}

@if (explained != null)
{
    foreach (var obj in explained.Objects)
    {
        <ConfigurationSection Edit=@Edit ObjectViewModel=@obj/>
    }

    <button hidden="@(!Edit)" @onclick="Save">Save</button>
    <h1 hidden>@Json</h1>
    <button hidden="@Edit" @onclick="@(() => Edit=true)">Edit</button>
    <button hidden="@(!Edit)" @onclick="CancelEdit">Cancel</button>
}
